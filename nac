'===================================
'Macro Name: Trade APS Split Generator
'Peter Riad 2025
'Version: v2.3
'Description: Full Macro with Split Data + Clear + UI Buttons
'===================================

Private Sub Workbook_Open()
    AddRunMacroButton
    AddClearDataButton
    AddEmailButton
End Sub

Sub SplitDataByColumnJ()
    Dim wsSource As Worksheet: Set wsSource = ThisWorkbook.Sheets("MainData")
    Dim wsLookup As Worksheet: Set wsLookup = ThisWorkbook.Sheets("Client Data")

    Dim lastRow As Long: lastRow = wsSource.Cells(wsSource.Rows.Count, "K").End(xlUp).Row
    Dim headers As Range: Set headers = wsSource.Range("C1:N1")

    Dim groups, sheetNames, timeNotes
    groups = Array(Array("33", "49", "72", "69", "20", "22", "24", "18", "7Z", "11", "17"), _
                   Array("30", "32", "8R"), _
                   Array("8G", "12"), _
                   Array("27", "52"), _
                   Array("28", "25", "7R", "10", "SG", "DA", "PA"), _
                   Array("19", "05", "14", "06", "04", "07", "5", "6", "4", "7"), _
                   Array("7B", "01", "9C", "02", "16", "15", "1", "2"))

    sheetNames = Array("33_49_72_69_20_22_24_18_7Z_11", "30_32_8R", "8G_12", "27_52", _
                       "28_25_7R_10_SG_DA_PA", "19_05_14_06_04_07", "7B_01_9C_02_16_15")

    timeNotes = Array("12 PM – 1 PM", "1:30 PM – 2:30 PM", "3 PM – 4 PM", _
                      "4:30 PM – 5:30 PM", "5 PM – 6 PM", "6:30 PM – 7 PM", "7 PM – 8 PM")

    Dim lookupData As Variant
    Dim lookupLastRow As Long: lookupLastRow = wsLookup.Cells(wsLookup.Rows.Count, "C").End(xlUp).Row
    lookupData = wsLookup.Range("A2:J" & lookupLastRow).Value

    Application.ScreenUpdating = False

    Dim i As Integer, j As Long, wsNew As Worksheet, val As String

    For i = 0 To UBound(groups)
        On Error Resume Next
        Application.DisplayAlerts = False
        ThisWorkbook.Sheets(sheetNames(i)).Delete
        Application.DisplayAlerts = True
        On Error GoTo 0

        Set wsNew = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsNew.Name = sheetNames(i)

        headers.Copy Destination:=wsNew.Range("A1")
        With wsNew.Range("A1:K1").Font
            .Bold = True
        End With

        wsNew.Cells(1, 12).Value = "Match Office"
        wsNew.Cells(1, 13).Value = "Match Acct"
        wsNew.Cells(1, 14).Value = "Status"
        wsNew.Cells(1, 15).Value = "Client Name"
        wsNew.Cells(1, 16).Value = "Client Type"
        wsNew.Cells(1, 17).Value = "Behavior"
        wsNew.Cells(1, 18).Value = "Notes"
        wsNew.Cells(1, 19).Value = "Notes 2"
        wsNew.Cells(1, 20).Value = "Behavior Match"

        With wsNew.Range("W1")
            .Value = "Time Slot: " & timeNotes(i)
            .Interior.Color = RGB(255, 255, 0)
            .Font.Bold = True
            .Font.Size = 11
        End With
        wsNew.Columns("W").AutoFit

        wsNew.Rows(1).AutoFilter

        Dim destRow As Long: destRow = 2

        For j = 2 To lastRow
            val = Trim(wsSource.Cells(j, 10).Value)
            Dim k As Long, matchFound As Boolean: matchFound = False
            For k = LBound(groups(i)) To UBound(groups(i))
                If val = groups(i)(k) Then
                    matchFound = True: Exit For
                End If
            Next k

            If matchFound Then
                wsNew.Range("A" & destRow & ":L" & destRow).Value = wsSource.Range("C" & j & ":O" & j).Value

                Dim rowD As String: rowD = UCase(Trim(CStr(wsSource.Cells(j, 4).Value)))
                Dim rowE As String: rowE = UCase(Trim(CStr(wsSource.Cells(j, 5).Value)))

                Dim l As Long, isMatch As Boolean: isMatch = False
                For l = 1 To UBound(lookupData)
                    Dim lookupC As String: lookupC = UCase(Trim(CStr(lookupData(l, 3))))
                    Dim lookupD As String: lookupD = UCase(Trim(CStr(lookupData(l, 4))))

                    If lookupC <> "" And lookupC <> "-" Then
                        isMatch = (rowD = lookupC And rowE = lookupD)
                    Else
                        isMatch = (rowE = lookupD)
                    End If

                    If isMatch Then
                        wsNew.Cells(destRow, 12).Value = lookupC
                        wsNew.Cells(destRow, 13).Value = lookupD
                        wsNew.Cells(destRow, 14).Value = "Matched"
                        wsNew.Cells(destRow, 15).Value = lookupData(l, 1)
                        wsNew.Cells(destRow, 16).Value = lookupData(l, 7)
                        wsNew.Cells(destRow, 17).Value = lookupData(l, 8)
                        wsNew.Cells(destRow, 18).Value = lookupData(l, 9)
                        wsNew.Cells(destRow, 19).Value = lookupData(l, 10)

                        Dim inputBehavior As String: inputBehavior = UCase(Trim(CStr(wsSource.Cells(j, 11).Value)))
                        Dim behaviorMatch As String
                        If inputBehavior = UCase(Trim(CStr(lookupData(l, 8)))) Then
                            behaviorMatch = "Matched"
                        Else
                            behaviorMatch = "Unmatched"
                        End If
                        wsNew.Cells(destRow, 20).Value = behaviorMatch
                        Exit For
                    End If
                Next l

                If Not isMatch Then
                    wsNew.Cells(destRow, 14).Value = "Unmatched"
                    wsNew.Cells(destRow, 20).Value = "Unmatched"
                End If

                destRow = destRow + 1
            End If
        Next j

        ' Highlight date mismatches
        Dim todayVal As String: todayVal = Format(Date, "yyyymmdd")
        Dim checkRow As Long
        For checkRow = 2 To destRow - 1
            Dim cellDate As String: cellDate = Trim(CStr(wsNew.Cells(checkRow, 4).Value))
            If cellDate <> "" And cellDate <> todayVal Then
                wsNew.Cells(checkRow, 4).Interior.Color = RGB(255, 0, 0)
            End If
            If wsNew.Cells(checkRow, 14).Value = "Unmatched" Then
                wsNew.Cells(checkRow, 14).Interior.Color = RGB(255, 165, 0)
            End If
            If wsNew.Cells(checkRow, 20).Value = "Unmatched" Then
                wsNew.Cells(checkRow, 20).Interior.Color = RGB(255, 165, 0)
            End If
        Next checkRow

        wsNew.Columns("A:T").AutoFit
    Next i

    Application.ScreenUpdating = True
    MsgBox "Data split, labeled, filtered, and validated!"
End Sub

Sub ClearMainDataSheet()
    Dim ws As Worksheet, wsName As String
    Application.DisplayAlerts = False
    For Each ws In ThisWorkbook.Sheets
        wsName = ws.Name
        If wsName <> "MainData" And wsName <> "Client Data" Then
            ws.Delete
        ElseIf wsName = "MainData" Then
            Dim lastRow As Long
            lastRow = ws.Cells(ws.Rows.Count, "C").End(xlUp).Row
            If lastRow > 1 Then ws.Rows("2:" & lastRow).Delete
        End If
    Next ws
    Application.DisplayAlerts = True
    MsgBox "All data cleared and sheets reset."
End Sub

Sub AddClearDataButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    Dim shp As Shape
    For Each shp In ws.Shapes
        If shp.Type = msoFormControl And shp.Name = "btnClearMainData" Then shp.Delete
    Next shp
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R4").Left, ws.Range("R4").Top, _
                             ws.Range("R4:T4").Width, ws.Range("R4:T4").Height + 5)
    With btn
        .Caption = "Clear All Data"
        .Name = "btnClearMainData"
        .OnAction = "ClearMainDataSheet"
    End With
End Sub

Sub AddRunMacroButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    Dim shp As Shape
    For Each shp In ws.Shapes
        If shp.Type = msoFormControl And shp.Name = "btnSplitData" Then shp.Delete
    Next shp
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R2").Left, ws.Range("R2").Top, _
                             ws.Range("R2:T2").Width, ws.Range("R2:T2").Height + 5)
    With btn
        .Caption = "Split Data"
        .Name = "btnSplitData"
        .OnAction = "SplitDataByColumnJ"
    End With
End Sub

Sub AddEmailButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    Dim shp As Shape
    For Each shp In ws.Shapes
        If shp.Type = msoFormControl And shp.Name = "btnEmailClients" Then shp.Delete
    Next shp
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R6").Left, ws.Range("R6").Top, _
                             ws.Range("R6:T6").Width, ws.Range("R6:T6").Height + 5)
    With btn
        .Caption = "Email Remaining"
        .Name = "btnEmailClients"
        .OnAction = "EmailRemainingByClient"
    End With
End Sub
