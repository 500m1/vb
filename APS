'===================================
'Macro Name: Trade APS Split Generator
'Peter Riad 2025
'Version: v3.1
'Description: Generates SPLIT APS Positions + Creates Emails per Client
'===================================

Private Sub Workbook_Open()
    AddRunMacroButton
    AddClearDataButton
    AddEmailButton
End Sub

Sub SplitDataByColumnJ()
    Dim wsSource As Worksheet
    Set wsSource = ThisWorkbook.Sheets("MainData")

    Dim wsLookup As Worksheet
    Set wsLookup = ThisWorkbook.Sheets("Client Data")

    Dim lastRow As Long
    lastRow = wsSource.Cells(wsSource.Rows.Count, "K").End(xlUp).Row

    Dim headers As Range
    Set headers = wsSource.Range("C1:M1")

    Dim groups As Variant, sheetNames As Variant, timeNotes As Variant
    groups = Array( _
        Array("33", "49", "72", "69", "20", "22", "24", "18", "7Z", "11", "17"), _
        Array("30", "32", "8R"), _
        Array("8G", "12"), _
        Array("27", "52"), _
        Array("28", "25", "7R", "10", "13", "SG", "DA", "PA"), _
        Array("19", "05", "14", "06", "04", "07", "5", "6", "4", "7"), _
        Array("7B", "01", "9C", "02", "16", "15", "1", "2") _
    )

    sheetNames = Array( _
        "33_49_72_69_20_22_24_18_7Z_11", "30_32_8R", "8G_12", "27_52", _
        "28_25_7R_10_13_SG_DA_PA", "19_05_14_06_04_07", "7B_01_9C_02_16_15" _
    )

    timeNotes = Array( _
        "12 PM – 1 PM", "1:30 PM – 2:30 PM", "3 PM – 4 PM", "4:30 PM – 5:30 PM", _
        "5 PM – 6 PM", "6:30 PM – 7 PM", "7 PM – 8 PM" _
    )

    Dim lookupData As Variant
    Dim lookupLastRow As Long
    lookupLastRow = wsLookup.Cells(wsLookup.Rows.Count, "C").End(xlUp).Row
    lookupData = wsLookup.Range("A2:J" & lookupLastRow).Value

    Dim i As Integer, j As Long, wsNew As Worksheet, val As String
    Application.ScreenUpdating = False

    For i = 0 To UBound(groups)
        On Error Resume Next
        Application.DisplayAlerts = False
        ThisWorkbook.Sheets(sheetNames(i)).Delete
        Application.DisplayAlerts = True
        On Error GoTo 0

        Set wsNew = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsNew.Name = sheetNames(i)

        headers.Copy Destination:=wsNew.Range("A1")
        wsNew.Range("A1:K1").Font.Bold = True
        wsNew.Cells(1, 12).Value = "Email?" ' Column L
        wsNew.Cells(1, 13).Value = "Match Office"
        wsNew.Cells(1, 14).Value = "Match Acct"
        wsNew.Cells(1, 15).Value = "Status"
        wsNew.Cells(1, 16).Value = "Client Name"
        wsNew.Cells(1, 17).Value = "Client Type"
        wsNew.Cells(1, 18).Value = "Behavior"
        wsNew.Cells(1, 19).Value = "Notes"
        wsNew.Cells(1, 20).Value = "Notes 2"
        wsNew.Cells(1, 21).Value = "Behavior Match"

        With wsNew.Range("V1")
            .Value = "Time Slot: " & timeNotes(i)
            .Font.Bold = True
            .Font.Size = 11
            .Interior.Color = RGB(255, 255, 0)
        End With

        Dim destRow As Long: destRow = 2

        For j = 2 To lastRow
            val = Trim(wsSource.Cells(j, 10).Value)
            Dim k As Long, matchFound As Boolean
            matchFound = False
            For k = LBound(groups(i)) To UBound(groups(i))
                If val = groups(i)(k) Then
                    matchFound = True
                    Exit For
                End If
            Next k

            If matchFound Then
                wsNew.Range("A" & destRow & ":K" & destRow).Value = wsSource.Range("C" & j & ":M" & j).Value
                wsNew.Cells(destRow, 12).Value = "" ' leave Email? blank

                Dim rowD As String, rowE As String
                rowD = UCase(Trim(CStr(wsSource.Cells(j, 4).Value)))
                rowE = UCase(Trim(CStr(wsSource.Cells(j, 5).Value)))

                Dim l As Long, matched As Boolean: matched = False
                For l = 1 To UBound(lookupData)
                    Dim lookupC As String, lookupD As String
                    lookupC = UCase(Trim(CStr(lookupData(l, 3))))
                    lookupD = UCase(Trim(CStr(lookupData(l, 4))))

                    If lookupC <> "" And lookupC <> "-" Then
                        If rowD = lookupC And rowE = lookupD Then matched = True
                    ElseIf rowE = lookupD Then
                        matched = True
                    End If

                    If matched Then
                        wsNew.Cells(destRow, 13).Value = lookupC
                        wsNew.Cells(destRow, 14).Value = lookupD
                        wsNew.Cells(destRow, 15).Value = "Matched"
                        wsNew.Cells(destRow, 16).Value = lookupData(l, 1)
                        wsNew.Cells(destRow, 17).Value = lookupData(l, 7)
                        wsNew.Cells(destRow, 18).Value = lookupData(l, 8)
                        wsNew.Cells(destRow, 19).Value = lookupData(l, 9)
                        wsNew.Cells(destRow, 20).Value = lookupData(l, 10)
                        wsNew.Cells(destRow, 21).Value = "Matched"
                        Exit For
                    End If
                Next l

                If Not matched Then
                    wsNew.Cells(destRow, 15).Value = "Unmatched"
                    wsNew.Cells(destRow, 21).Value = "Unmatched"
                End If

                If wsNew.Cells(destRow, 15).Value = "Unmatched" Then
                    wsNew.Cells(destRow, 15).Interior.Color = RGB(255, 192, 0)
                End If
                If wsNew.Cells(destRow, 21).Value = "Unmatched" Then
                    wsNew.Cells(destRow, 21).Interior.Color = RGB(255, 192, 0)
                End If

                destRow = destRow + 1
            End If
        Next j

        ' Highlight Column D (Date) if not today
        Dim todayVal As String
        todayVal = Format(Date, "yyyymmdd")
        Dim r As Long
        For r = 2 To destRow - 1
            Dim cellDate As String
            cellDate = Trim(CStr(wsNew.Cells(r, 4).Value))
            If cellDate <> "" And cellDate <> todayVal Then
                wsNew.Cells(r, 4).Interior.Color = RGB(255, 0, 0)
            End If
        Next r

        With wsNew.Sort
            .SortFields.Clear
            .SortFields.Add Key:=wsNew.Range("J2:J" & destRow - 1), Order:=xlAscending
            .SortFields.Add Key:=wsNew.Range("K2:K" & destRow - 1), Order:=xlAscending
            .SortFields.Add Key:=wsNew.Range("I2:I" & destRow - 1), Order:=xlAscending
            .SortFields.Add Key:=wsNew.Range("E2:E" & destRow - 1), Order:=xlAscending
            .SetRange wsNew.Range("A1:V" & destRow - 1)
            .Header = xlYes
            .Apply
        End With

        wsNew.Columns("A:W").AutoFit
        wsNew.Rows("1:1").AutoFilter
    Next i

    Application.ScreenUpdating = True
    MsgBox "Data split, labeled, and validated!"
End Sub

Sub ClearMainDataSheet()
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Sheets
        If ws.Name <> "MainData" And ws.Name <> "Client Data" Then
            Application.DisplayAlerts = False
            ws.Delete
            Application.DisplayAlerts = True
        ElseIf ws.Name = "MainData" Then
            ws.Rows("2:" & ws.Cells(ws.Rows.Count, "A").End(xlUp).Row).ClearContents
        End If
    Next ws
    MsgBox "MainData cleared and split sheets removed!"
End Sub

Sub AddRunMacroButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    On Error Resume Next: ws.Shapes("btnSplitData").Delete: On Error GoTo 0
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R2").Left, ws.Range("R2").Top, _
                             ws.Range("R2:T2").Width, ws.Range("R2:T2").Height + 5)
    With btn
        .Caption = "Split Data"
        .Name = "btnSplitData"
        .OnAction = "SplitDataByColumnJ"
    End With
End Sub

Sub AddClearDataButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    On Error Resume Next: ws.Shapes("btnClearMainData").Delete: On Error GoTo 0
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R4").Left, ws.Range("R4").Top, _
                             ws.Range("R4:T4").Width, ws.Range("R4:T4").Height + 5)
    With btn
        .Caption = "Clear Main Data"
        .Name = "btnClearMainData"
        .OnAction = "ClearMainDataSheet"
    End With
End Sub

Sub AddEmailButton()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets("MainData")
    On Error Resume Next: ws.Shapes("btnEmailRemaining").Delete: On Error GoTo 0
    Dim btn As Button
    Set btn = ws.Buttons.Add(ws.Range("R6").Left, ws.Range("R6").Top, _
                             ws.Range("R6:T6").Width, ws.Range("R6:T6").Height + 5)
    With btn
        .Caption = "Email Remaining by Client"
        .Name = "btnEmailRemaining"
        .OnAction = "EmailRemainingByClient"
    End With
End Sub

Sub EmailRemainingByClient()
    Dim ws As Worksheet
    Dim clientRows As Object: Set clientRows = CreateObject("Scripting.Dictionary")

    For Each ws In ThisWorkbook.Sheets
        If ws.Name <> "MainData" And ws.Name <> "Client Data" Then
            Dim lastRow As Long: lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
            Dim i As Long
            For i = 2 To lastRow
                If LCase(Trim(ws.Cells(i, 12).Value)) = "yes" Or LCase(Trim(ws.Cells(i, 12).Value)) = "y" Then
                    Dim clientKey As String: clientKey = ws.Cells(i, 16).Value
                    If clientKey <> "" Then
                        If Not clientRows.exists(clientKey) Then
                            Set clientRows(clientKey) = New Collection
                        End If
                        clientRows(clientKey).Add ws.Rows(i)
                    End If
                End If
            Next i
        End If
    Next ws

    Dim olApp As Object, outMail As Object
    Set olApp = CreateObject("Outlook.Application")

    Dim client As Variant
    For Each client In clientRows.keys
        Set outMail = olApp.CreateItem(0)

        Dim outMsg As String
        outMsg = "<b>Missing Allocations:</b><br><br><table border='1' cellpadding='3'><tr>"
        For i = 1 To 11
            outMsg = outMsg & "<th>" & clientRows(client)(1).Parent.Cells(1, i).Text & "</th>"
        Next i
        outMsg = outMsg & "</tr>"

        For Each rw In clientRows(client)
            outMsg = outMsg & "<tr>"
            For i = 1 To 11
                outMsg = outMsg & "<td>" & rw.Cells(1, i).Text & "</td>"
            Next i
            outMsg = outMsg & "</tr>"
        Next rw

        outMsg = outMsg & "</table><br><br>Thank you,<br>"

        With outMail
            .To = "" ' <-- Fill as needed
            '.CC = "" ' <-- Optional CCs
            .Subject = client & " | Missing Allocations | Barclays | " & Format(Date, "dd-mmm-yyyy")
            .htmlBody = outMsg
            .Display
        End With
    Next client

    MsgBox "Emails generated for all clients marked 'Yes'."
End Sub


